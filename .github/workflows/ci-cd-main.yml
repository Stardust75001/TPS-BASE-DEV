name: 🚀 CI/CD TPS BASE DEV - Suite Complète

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_only:
        description: "Lancer uniquement le déploiement du thème ?"
        type: boolean
        default: false
        required: true
      force_backup:
        description: "Forcer la sauvegarde complète ?"
        type: boolean
        default: false
        required: false

# Configuration des URLs et domaines
env:
  SHOP_DOMAIN: ${{ secrets.SHOPIFY_STORE }}
  SITE_ORIGIN: https://${{ secrets.SHOPIFY_STORE }}
  URL_HOME: https://${{ secrets.SHOPIFY_STORE }}/
  URL_COLLECTION: https://${{ secrets.SHOPIFY_STORE }}/collections/all
  URL_PRODUCT_TEST: https://${{ secrets.SHOPIFY_STORE }}/products/test-product
  ROBOTS_URL: https://${{ secrets.SHOPIFY_STORE }}/robots.txt
  SITEMAP_URL: https://${{ secrets.SHOPIFY_STORE }}/sitemap.xml

jobs:
  # === 1) BUILD & VALIDATION ===
  basic-build:
    name: "🔨 Build & Validation"
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔍 Validate Structure
        run: |
          echo "✅ Validation de la structure TPS BASE DEV"
          ls -la
          test -f "assets/analytics-config-manager.js" || echo "❌ Analytics manquant"
          test -f "assets/ecommerce-tracking.js" || echo "❌ E-commerce tracking manquant"
          test -f "assets/stories-tooltips.js" || echo "✅ Tooltips présents"
          echo "✅ Structure validée"

  # === 2) SMOKE TESTS ===
  smoke-tests:
    name: "🧪 Tests de Fumée"
    if: ${{ !(github.event_name == 'workflow_dispatch' && inputs.deploy_only == true) }}
    needs: basic-build
    runs-on: ubuntu-latest
    env:
      VARIANT_ID_1: ${{ secrets.VARIANT_ID_1 }}
      VARIANT_ID_2: ${{ secrets.VARIANT_ID_2 }}
      PSI_KEY: ${{ secrets.GOOGLE_PSI_API_KEY }}
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🌐 Test Pages HTTP (200)
        run: |
          set -euo pipefail
          echo "🔍 Test des pages principales..."
          for url in "${URL_HOME}" "${URL_COLLECTION}"; do
            echo "Testing: $url"
            code="$(curl -s -o /dev/null -w '%{http_code}' "$url")"
            if [[ "$code" != "200" ]]; then
              echo "❌ $url returned $code (expected 200)"
              exit 1
            fi
            echo "✅ $url OK ($code)"
          done

      - name: 🤖 Test robots.txt & sitemap.xml
        run: |
          echo "🔍 Test robots.txt..."
          curl -sSf "${ROBOTS_URL}" > /dev/null && echo "✅ robots.txt OK" || echo "⚠️ robots.txt inaccessible"

          echo "🔍 Test sitemap.xml..."
          curl -sSf "${SITEMAP_URL}" > /dev/null && echo "✅ sitemap.xml OK" || echo "⚠️ sitemap.xml inaccessible"

      - name: 🛒 Test Add-to-Cart
        if: env.VARIANT_ID_1 != ''
        run: |
          echo "🛒 Test ajout au panier..."
          response=$(curl -s -X POST "${SITE_ORIGIN}/cart/add" \
            -d "id=${VARIANT_ID_1}&quantity=1" \
            -H "Content-Type: application/x-www-form-urlencoded")
          echo "✅ Add-to-cart response: $response"

      - name: ⚡ Test Performance (PageSpeed Insights)
        if: env.PSI_KEY != ''
        run: |
          echo "⚡ Test de performance..."
          psi_url="https://www.googleapis.com/pagespeedonline/v5/runPagespeed?url=${URL_HOME}&key=${PSI_KEY}"
          response=$(curl -s "$psi_url")
          score=$(echo "$response" | jq -r '.lighthouseResult.categories.performance.score // 0' | awk '{print int($1 * 100)}')
          echo "📊 Performance Score: ${score}/100"
          if [[ "$score" -lt 70 ]]; then
            echo "⚠️ Performance en dessous de 70/100"
          else
            echo "✅ Performance acceptable"
          fi

  # === 3) THEME CHECK ===
  theme-check:
    name: "🎨 Shopify Theme Check"
    if: ${{ !(github.event_name == 'workflow_dispatch' && inputs.deploy_only == true) }}
    needs: smoke-tests
    runs-on: ubuntu-latest
    env:
      SHOPIFY_FLAG_STORE: ${{ secrets.SHOPIFY_STORE }}
      SHOPIFY_CLI_THEME_TOKEN: ${{ secrets.SHOPIFY_CLI_THEME_TOKEN }}
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Install Shopify CLI
        run: npm i -g @shopify/cli @shopify/theme

      - name: 🔍 Theme Check
        run: |
          echo "🔍 Vérification du thème Shopify..."
          shopify theme check --fail-level error || true
          echo "✅ Theme check terminé"

  # === 4) API ADMIN TEST ===
  api-admin-test:
    name: "🔑 Test API Admin"
    if: ${{ !(github.event_name == 'workflow_dispatch' && inputs.deploy_only == true) }}
    needs: theme-check
    runs-on: ubuntu-latest
    env:
      SHOPIFY_STORE: ${{ secrets.SHOPIFY_STORE }}
      SHOPIFY_ADMIN_TOKEN: ${{ secrets.SHOPIFY_ADMIN_TOKEN }}
    steps:
      - name: 🏪 Test Shop Info
        run: |
          echo "🔍 Test de l'API Admin..."
          response=$(curl -sS -H "X-Shopify-Access-Token: $SHOPIFY_ADMIN_TOKEN" \
            "https://${SHOPIFY_STORE}/admin/api/2024-10/shop.json")
          echo "$response" | jq -r '.shop.name // "❌ Échec API"'
          echo "✅ API Admin fonctionnelle"

  # === 5) BACKUP AUTOMATIQUE ===
  backup-weekly:
    name: "💾 Sauvegarde Hebdomadaire"
    if: ${{ github.ref == 'refs/heads/main' || inputs.force_backup == true }}
    needs: api-admin-test
    runs-on: ubuntu-latest
    env:
      SHOPIFY_STORE: ${{ secrets.SHOPIFY_STORE }}
      SHOPIFY_ADMIN_TOKEN: ${{ secrets.SHOPIFY_ADMIN_TOKEN }}
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 💾 Backup Theme & Settings
        run: |
          echo "💾 Création de la sauvegarde..."
          mkdir -p backups/$(date +%Y%m%d_%H%M%S)

          # Backup du thème principal
          curl -sS -H "X-Shopify-Access-Token: $SHOPIFY_ADMIN_TOKEN" \
            "https://${SHOPIFY_STORE}/admin/api/2024-10/themes.json" > backups/themes_$(date +%Y%m%d).json

          echo "✅ Sauvegarde créée dans backups/"

      - name: 📤 Upload Backup Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: shopify-backup-${{ github.sha }}
          path: backups/
          retention-days: 30

  # === 6) DÉPLOIEMENT AUTOMATIQUE ===
  theme-deploy:
    name: "🚀 Déploiement Thème"
    needs: [backup-weekly]
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' && secrets.ENABLE_THEME_DEPLOY == 'true' && !(github.event_name == 'workflow_dispatch' && inputs.deploy_only == true) }}
    env:
      SHOPIFY_FLAG_STORE: ${{ secrets.SHOPIFY_STORE }}
      SHOPIFY_CLI_THEME_TOKEN: ${{ secrets.SHOPIFY_CLI_THEME_TOKEN }}
      THEME_ID: ${{ secrets.THEME_ID }}
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Install Shopify CLI
        run: npm i -g @shopify/cli @shopify/theme

      - name: 🚀 Push Theme
        run: |
          echo "🚀 Déploiement du thème..."
          if [[ -n "$THEME_ID" ]]; then
            shopify theme push --theme-id "$THEME_ID" --force
          else
            shopify theme push --unpublished --force
          fi
          echo "✅ Thème déployé avec succès"

  # === 7) DÉPLOIEMENT MANUEL ===
  theme-deploy-manual:
    name: "🎯 Déploiement Manuel"
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.deploy_only == true && secrets.ENABLE_THEME_DEPLOY == 'true' }}
    env:
      SHOPIFY_FLAG_STORE: ${{ secrets.SHOPIFY_STORE }}
      SHOPIFY_CLI_THEME_TOKEN: ${{ secrets.SHOPIFY_CLI_THEME_TOKEN }}
      THEME_ID: ${{ secrets.THEME_ID }}
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Install Shopify CLI
        run: npm i -g @shopify/cli @shopify/theme

      - name: 🎯 Push Theme (Manuel)
        run: |
          echo "🎯 Déploiement manuel du thème..."
          if [[ -n "$THEME_ID" ]]; then
            shopify theme push --theme-id "$THEME_ID" --force
          else
            shopify theme push --unpublished --force
          fi
          echo "✅ Déploiement manuel réussi"
