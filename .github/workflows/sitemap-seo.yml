name: üó∫Ô∏è Sitemap & SEO Hebdomadaire

on:
  schedule:
    # Tous les mardis √† 6h00 UTC (7h00 CET)
    - cron: '0 6 * * 2'
  workflow_dispatch:
    inputs:
      check_type:
        description: "Type de v√©rification SEO"
        required: true
        default: 'complete'
        type: choice
        options:
        - complete
        - sitemap_only
        - performance_only

env:
  SHOPIFY_STORE: ${{ secrets.SHOPIFY_STORE }}
  SITE_ORIGIN: https://${{ secrets.SHOPIFY_STORE }}
  ROBOTS_URL: https://${{ secrets.SHOPIFY_STORE }}/robots.txt
  SITEMAP_URL: https://${{ secrets.SHOPIFY_STORE }}/sitemap.xml
  GOOGLE_PSI_API_KEY: ${{ secrets.GOOGLE_PSI_API_KEY }}

jobs:
  seo-audit:
    name: "üó∫Ô∏è Audit SEO & Sitemap"
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üóìÔ∏è Generate Report Timestamp
        id: timestamp
        run: |
          TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
          REPORT_DATE=$(date +"%Y-%m-%d %H:%M:%S UTC")
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
          echo "REPORT_DATE=$REPORT_DATE" >> $GITHUB_ENV
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT

      - name: üìÅ Create Report Directory
        run: |
          mkdir -p "reports/seo/$TIMESTAMP"

      - name: üó∫Ô∏è Analyze Sitemap
        if: ${{ inputs.check_type == 'complete' || inputs.check_type == 'sitemap_only' }}
        run: |
          echo "üó∫Ô∏è Analyse du sitemap..."
          
          # T√©l√©charger et analyser le sitemap
          curl -sS "$SITEMAP_URL" > "reports/seo/$TIMESTAMP/sitemap.xml"
          
          # Compter les URLs
          URL_COUNT=$(grep -o '<url>' "reports/seo/$TIMESTAMP/sitemap.xml" | wc -l)
          
          # Extraire les URLs principales
          grep -oP '(?<=<loc>).*?(?=</loc>)' "reports/seo/$TIMESTAMP/sitemap.xml" | head -20 > "reports/seo/$TIMESTAMP/sample_urls.txt"
          
          echo "SITEMAP_URL_COUNT=$URL_COUNT" >> $GITHUB_ENV
          echo "‚úÖ Sitemap analys√©: $URL_COUNT URLs trouv√©es"

      - name: ü§ñ Check robots.txt
        if: ${{ inputs.check_type == 'complete' || inputs.check_type == 'sitemap_only' }}
        run: |
          echo "ü§ñ V√©rification robots.txt..."
          
          curl -sS "$ROBOTS_URL" > "reports/seo/$TIMESTAMP/robots.txt"
          
          # V√©rifier si le sitemap est r√©f√©renc√©
          if grep -q "Sitemap:" "reports/seo/$TIMESTAMP/robots.txt"; then
            echo "ROBOTS_HAS_SITEMAP=true" >> $GITHUB_ENV
            echo "‚úÖ Sitemap r√©f√©renc√© dans robots.txt"
          else
            echo "ROBOTS_HAS_SITEMAP=false" >> $GITHUB_ENV
            echo "‚ö†Ô∏è Sitemap non r√©f√©renc√© dans robots.txt"
          fi

      - name: ‚ö° Performance Audit (Sample Pages)
        if: ${{ inputs.check_type == 'complete' || inputs.check_type == 'performance_only' }}
        run: |
          echo "‚ö° Audit de performance..."
          
          # Test de la page d'accueil
          if [[ -n "$GOOGLE_PSI_API_KEY" ]]; then
            echo "Testing homepage performance..."
            
            psi_url="https://www.googleapis.com/pagespeedonline/v5/runPagespeed?url=${SITE_ORIGIN}&key=${GOOGLE_PSI_API_KEY}&strategy=mobile"
            response=$(curl -s "$psi_url")
            
            # Extraire les m√©triques
            performance_score=$(echo "$response" | jq -r '.lighthouseResult.categories.performance.score // 0' | awk '{print int($1 * 100)}')
            accessibility_score=$(echo "$response" | jq -r '.lighthouseResult.categories.accessibility.score // 0' | awk '{print int($1 * 100)}')
            seo_score=$(echo "$response" | jq -r '.lighthouseResult.categories.seo.score // 0' | awk '{print int($1 * 100)}')
            
            echo "PERFORMANCE_SCORE=$performance_score" >> $GITHUB_ENV
            echo "ACCESSIBILITY_SCORE=$accessibility_score" >> $GITHUB_ENV
            echo "SEO_SCORE=$seo_score" >> $GITHUB_ENV
            
            # Sauvegarder le rapport complet
            echo "$response" > "reports/seo/$TIMESTAMP/psi_report.json"
            
            echo "üìä Scores - Performance: $performance_score, Accessibilit√©: $accessibility_score, SEO: $seo_score"
          else
            echo "‚ö†Ô∏è Google PSI API Key non configur√©e"
          fi

      - name: üîç Test Sample URLs
        if: ${{ inputs.check_type == 'complete' }}
        run: |
          echo "üîç Test d'URLs √©chantillon..."
          
          # Tester les 10 premi√®res URLs du sitemap
          if [[ -f "reports/seo/$TIMESTAMP/sample_urls.txt" ]]; then
            while IFS= read -r url && [[ $((++count)) -le 10 ]]; do
              echo "Testing: $url"
              http_code=$(curl -s -o /dev/null -w '%{http_code}' "$url")
              if [[ "$http_code" == "200" ]]; then
                echo "‚úÖ $url OK"
              else
                echo "‚ùå $url returned $http_code"
              fi
            done < "reports/seo/$TIMESTAMP/sample_urls.txt"
          fi

      - name: üìä Generate SEO Report
        run: |
          echo "üìä G√©n√©ration du rapport SEO..."
          
          cat > "reports/seo/$TIMESTAMP/SEO_REPORT.md" << EOF
          # üó∫Ô∏è RAPPORT SEO & SITEMAP - TPS BASE DEV
          
          **Date:** $REPORT_DATE
          **Store:** $SHOPIFY_STORE
          **Type d'audit:** ${{ inputs.check_type || 'complete' }}
          
          ## üó∫Ô∏è Sitemap Analysis
          
          - **URL:** $SITEMAP_URL
          - **Nombre d'URLs:** ${SITEMAP_URL_COUNT:-'Non analys√©'}
          - **Status:** $(curl -s -o /dev/null -w '%{http_code}' "$SITEMAP_URL")
          
          ## ü§ñ Robots.txt
          
          - **URL:** $ROBOTS_URL  
          - **Sitemap r√©f√©renc√©:** ${ROBOTS_HAS_SITEMAP:-'Non v√©rifi√©'}
          - **Status:** $(curl -s -o /dev/null -w '%{http_code}' "$ROBOTS_URL")
          
          ## ‚ö° Performance Scores (Mobile)
          
          $(if [[ -n "${PERFORMANCE_SCORE:-}" ]]; then
            echo "- **Performance:** ${PERFORMANCE_SCORE}/100"
            echo "- **Accessibilit√©:** ${ACCESSIBILITY_SCORE}/100"  
            echo "- **SEO:** ${SEO_SCORE}/100"
          else
            echo "- Performance non test√©e (API Key manquante)"
          fi)
          
          ## üéØ Recommandations
          
          $(if [[ "${PERFORMANCE_SCORE:-0}" -lt 70 ]]; then
            echo "- ‚ö†Ô∏è Performance √† am√©liorer (< 70/100)"
          else
            echo "- ‚úÖ Performance acceptable"
          fi)
          
          $(if [[ "${SEO_SCORE:-0}" -lt 90 ]]; then
            echo "- ‚ö†Ô∏è SEO √† optimiser (< 90/100)"
          else
            echo "- ‚úÖ SEO optimal"
          fi)
          
          $(if [[ "${ROBOTS_HAS_SITEMAP}" != "true" ]]; then
            echo "- ‚ö†Ô∏è Ajouter la r√©f√©rence sitemap dans robots.txt"
          else
            echo "- ‚úÖ Robots.txt correctement configur√©"
          fi)
          
          ## üìà Actions Sugg√©r√©es
          
          1. V√©rifier r√©guli√®rement la validit√© du sitemap
          2. Surveiller les scores de performance
          3. Optimiser les images et ressources
          4. Maintenir les bonnes pratiques SEO
          
          ---
          
          **Prochain audit:** $(date -d '+7 days' '+%Y-%m-%d')
          **G√©n√©r√© automatiquement par GitHub Actions**
          EOF
          
          echo "‚úÖ Rapport SEO g√©n√©r√©"

      - name: üì§ Upload SEO Report
        uses: actions/upload-artifact@v3
        with:
          name: seo-report-${{ steps.timestamp.outputs.timestamp }}
          path: reports/seo/${{ env.TIMESTAMP }}/
          retention-days: 90

      - name: üìù Display Summary
        run: |
          echo "## üó∫Ô∏è Rapport SEO & Sitemap" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**üóìÔ∏è Date:** $REPORT_DATE" >> $GITHUB_STEP_SUMMARY
          echo "**üè™ Store:** $SHOPIFY_STORE" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üó∫Ô∏è Sitemap" >> $GITHUB_STEP_SUMMARY
          echo "- URLs trouv√©es: ${SITEMAP_URL_COUNT:-'Non analys√©'}" >> $GITHUB_STEP_SUMMARY
          echo "- Status: $(curl -s -o /dev/null -w '%{http_code}' "$SITEMAP_URL")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ -n "${PERFORMANCE_SCORE:-}" ]]; then
            echo "### ‚ö° Performance (Mobile)" >> $GITHUB_STEP_SUMMARY
            echo "- Performance: ${PERFORMANCE_SCORE}/100" >> $GITHUB_STEP_SUMMARY
            echo "- Accessibilit√©: ${ACCESSIBILITY_SCORE}/100" >> $GITHUB_STEP_SUMMARY
            echo "- SEO: ${SEO_SCORE}/100" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "‚úÖ **Rapport d√©taill√© disponible dans les Artifacts**" >> $GITHUB_STEP_SUMMARY