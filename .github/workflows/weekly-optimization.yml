name: 🚀 Weekly Theme Optimization

on:
  schedule:
    # Tous les lundis à 8h00 UTC (10h00 Paris)
    - cron: '0 8 * * 1'
  workflow_dispatch: # Permet l'exécution manuelle

permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  theme-optimization:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: 🛠️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 💎 Setup Ruby (pour theme-check)
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true
    
    - name: 📦 Install Shopify CLI
      run: |
        npm install -g @shopify/cli @shopify/theme
        gem install theme-check
    
    - name: 🔧 Permissions sur les scripts
      run: |
        chmod +x *.sh || true
        chmod +x scripts/*.sh || true
    
    - name: 🔒 Audit de sécurité
      id: security_audit
      run: |
        echo "=== AUDIT DE SÉCURITÉ ===" > audit_results.txt
        
        # Recherche de secrets exposés
        SECRET_COUNT=$(grep -r "sk_live\|pk_live" --include="*.liquid" . | wc -l || echo "0")
        echo "Secrets exposés: $SECRET_COUNT" >> audit_results.txt
        
        # API Keys
        API_COUNT=$(grep -r "AIza[A-Za-z0-9]\{35\}" --include="*.liquid" --include="*.js" . | wc -l || echo "0")
        echo "Clés API exposées: $API_COUNT" >> audit_results.txt
        
        # Tokens
        TOKEN_COUNT=$(grep -r "ghp_\|gho_\|ghu_\|ghs_\|ghr_" --include="*.liquid" --include="*.js" . | wc -l || echo "0")
        echo "Tokens exposés: $TOKEN_COUNT" >> audit_results.txt
        
        # Score sécurité
        SECURITY_SCORE=$((100 - SECRET_COUNT * 30 - API_COUNT * 20 - TOKEN_COUNT * 25))
        echo "Score sécurité: $SECURITY_SCORE/100" >> audit_results.txt
        
        echo "security_score=$SECURITY_SCORE" >> $GITHUB_OUTPUT
        cat audit_results.txt
    
    - name: 📝 Validation JSON
      id: json_validation
      run: |
        echo "=== VALIDATION JSON ===" >> audit_results.txt
        JSON_ERRORS=0
        
        for file in locales/*.json; do
          if [ -f "$file" ]; then
            if python3 -m json.tool "$file" > /dev/null 2>&1; then
              echo "✅ $(basename $file)" >> audit_results.txt
            else
              echo "❌ $(basename $file)" >> audit_results.txt
              JSON_ERRORS=$((JSON_ERRORS + 1))
            fi
          fi
        done
        
        echo "Erreurs JSON: $JSON_ERRORS" >> audit_results.txt
        echo "json_errors=$JSON_ERRORS" >> $GITHUB_OUTPUT
    
    - name: ⚡ Audit de performance
      id: performance_audit
      run: |
        echo "=== AUDIT DE PERFORMANCE ===" >> audit_results.txt
        
        # Images sans dimensions
        IMG_NO_DIM=$(grep -r "<img" --include="*.liquid" . | grep -v -E "width=|height=" | wc -l || echo "0")
        echo "Images sans dimensions: $IMG_NO_DIM" >> audit_results.txt
        
        # Console.log en production
        CONSOLE_LOGS=$(grep -r "console\." --include="*.liquid" . | wc -l || echo "0")
        echo "Console.log restants: $CONSOLE_LOGS" >> audit_results.txt
        
        # Filtres dépréciés img_url
        DEPRECATED_FILTERS=$(find . -name "*.liquid" -not -path "./backup*" -exec grep -l "img_url" {} \; | wc -l || echo "0")
        echo "Filtres img_url dépréciés: $DEPRECATED_FILTERS" >> audit_results.txt
        
        # Images sans ALT
        IMG_NO_ALT=$(grep -r "<img" --include="*.liquid" . | grep -v "alt=" | wc -l || echo "0")
        echo "Images sans ALT: $IMG_NO_ALT" >> audit_results.txt
        
        # Score performance
        PERFORMANCE_SCORE=$((100 - (IMG_NO_DIM > 50 ? 20 : 0) - (CONSOLE_LOGS > 10 ? 15 : 0) - DEPRECATED_FILTERS * 5 - (IMG_NO_ALT > 20 ? 10 : 0)))
        echo "Score performance: $PERFORMANCE_SCORE/100" >> audit_results.txt
        
        echo "performance_score=$PERFORMANCE_SCORE" >> $GITHUB_OUTPUT
        echo "img_no_dim=$IMG_NO_DIM" >> $GITHUB_OUTPUT
        echo "console_logs=$CONSOLE_LOGS" >> $GITHUB_OUTPUT
        echo "deprecated_filters=$DEPRECATED_FILTERS" >> $GITHUB_OUTPUT
    
    - name: 🔧 Corrections automatiques
      id: auto_fixes
      run: |
        echo "=== CORRECTIONS AUTOMATIQUES ===" >> audit_results.txt
        CHANGES_MADE=0
        
        # Exécuter les scripts de correction s'ils existent
        if [ -f "./auto-fix-theme-check.sh" ]; then
          ./auto-fix-theme-check.sh >> audit_results.txt 2>&1 || true
          CHANGES_MADE=1
        fi
        
        if [ -f "./quick-debug-shopify.sh" ]; then
          ./quick-debug-shopify.sh >> audit_results.txt 2>&1 || true
          CHANGES_MADE=1
        fi
        
        # Corrections manuelles simples
        # Remplacer img_url par image_url dans les fichiers liquid
        find . -name "*.liquid" -not -path "./backup*" -exec sed -i.bak 's/| *img_url/| image_url/g' {} \; || true
        
        # Supprimer les fichiers de backup
        find . -name "*.bak" -delete || true
        
        echo "changes_made=$CHANGES_MADE" >> $GITHUB_OUTPUT
        echo "Corrections appliquées: $CHANGES_MADE" >> audit_results.txt
    
    - name: 📊 Score final et rapport
      id: final_score
      run: |
        SECURITY_SCORE="${{ steps.security_audit.outputs.security_score }}"
        PERFORMANCE_SCORE="${{ steps.performance_audit.outputs.performance_score }}"
        JSON_ERRORS="${{ steps.json_validation.outputs.json_errors }}"
        
        # Score final pondéré
        FINAL_SCORE=$(( (SECURITY_SCORE * 40 + PERFORMANCE_SCORE * 40 + (JSON_ERRORS == 0 ? 100 : 0) * 20) / 100 ))
        
        echo "=== SCORE FINAL ===" >> audit_results.txt
        echo "🔒 Sécurité: $SECURITY_SCORE/100 (40%)" >> audit_results.txt
        echo "⚡ Performance: $PERFORMANCE_SCORE/100 (40%)" >> audit_results.txt
        echo "📝 JSON: $([ $JSON_ERRORS -eq 0 ] && echo "100" || echo "0")/100 (20%)" >> audit_results.txt
        echo "🏆 Score final: $FINAL_SCORE/100" >> audit_results.txt
        
        # Statut basé sur le score
        if [ $FINAL_SCORE -ge 90 ]; then
          STATUS="🏆 EXCELLENT - Production Ready"
        elif [ $FINAL_SCORE -ge 80 ]; then
          STATUS="✅ BON - Optimisations mineures"
        elif [ $FINAL_SCORE -ge 70 ]; then
          STATUS="⚠️ MOYEN - Corrections recommandées"
        else
          STATUS="❌ FAIBLE - Corrections critiques requises"
        fi
        
        echo "Statut: $STATUS" >> audit_results.txt
        echo "final_score=$FINAL_SCORE" >> $GITHUB_OUTPUT
        echo "status=$STATUS" >> $GITHUB_OUTPUT
        
        # Sauvegarder la date d'audit
        echo "Audit du: $(date '+%d/%m/%Y à %H:%M UTC')" >> audit_results.txt
        
        cat audit_results.txt
    
    - name: 🔍 Vérifier les changements
      id: check_changes
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "Des modifications ont été détectées."
          git status
        else
          echo "has_changes=false" >> $GITHUB_OUTPUT
          echo "Aucune modification détectée."
        fi
    
    - name: 🌿 Créer une branche pour les optimisations
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        BRANCH_NAME="automation/weekly-optimization-$(date +%Y%m%d)"
        git checkout -b $BRANCH_NAME
        echo "branch_name=$BRANCH_NAME" >> $GITHUB_ENV
    
    - name: 💾 Commit des optimisations
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add .
        git commit -m "🚀 Weekly optimization: Score ${{ steps.final_score.outputs.final_score }}/100

        📊 Rapport d'optimisation:
        - 🔒 Sécurité: ${{ steps.security_audit.outputs.security_score }}/100
        - ⚡ Performance: ${{ steps.performance_audit.outputs.performance_score }}/100  
        - 📝 JSON: $([ "${{ steps.json_validation.outputs.json_errors }}" -eq 0 ] && echo "100" || echo "0")/100
        - 🎯 Statut: ${{ steps.final_score.outputs.status }}
        
        🔧 Corrections appliquées:
        - Images sans dimensions: ${{ steps.performance_audit.outputs.img_no_dim }}
        - Console.log nettoyés: ${{ steps.performance_audit.outputs.console_logs }}
        - Filtres modernisés: ${{ steps.performance_audit.outputs.deprecated_filters }}
        
        Generated by GitHub Actions on $(date)"
    
    - name: 📤 Push de la branche
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        git push origin ${{ env.branch_name }}
    
    - name: 🔄 Créer Pull Request
      if: steps.check_changes.outputs.has_changes == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ env.branch_name }}
        title: "🚀 Weekly Theme Optimization - Score ${{ steps.final_score.outputs.final_score }}/100"
        body: |
          ## 📊 Rapport d'Optimisation Hebdomadaire
          
          **🎯 Score Final: ${{ steps.final_score.outputs.final_score }}/100**
          **📅 Date: $(date '+%d/%m/%Y')**
          **🔄 Status: ${{ steps.final_score.outputs.status }}**
          
          ### 📈 Détails des Scores
          
          | Catégorie | Score | Poids | État |
          |-----------|-------|--------|------|
          | 🔒 **Sécurité** | ${{ steps.security_audit.outputs.security_score }}/100 | 40% | $([ "${{ steps.security_audit.outputs.security_score }}" -ge 90 ] && echo "✅ Excellent" || echo "⚠️ À surveiller") |
          | ⚡ **Performance** | ${{ steps.performance_audit.outputs.performance_score }}/100 | 40% | $([ "${{ steps.performance_audit.outputs.performance_score }}" -ge 90 ] && echo "✅ Excellent" || echo "⚠️ À améliorer") |
          | 📝 **JSON** | $([ "${{ steps.json_validation.outputs.json_errors }}" -eq 0 ] && echo "100" || echo "0")/100 | 20% | $([ "${{ steps.json_validation.outputs.json_errors }}" -eq 0 ] && echo "✅ Valide" || echo "❌ Erreurs détectées") |
          
          ### 🔧 Optimisations Appliquées
          
          - **Images sans dimensions**: ${{ steps.performance_audit.outputs.img_no_dim }}
          - **Console.log en production**: ${{ steps.performance_audit.outputs.console_logs }}
          - **Filtres dépréciés corrigés**: ${{ steps.performance_audit.outputs.deprecated_filters }}
          
          ### 🎯 Prochaines Actions Recommandées
          
          $([ "${{ steps.final_score.outputs.final_score }}" -lt 80 ] && echo "- [ ] Réviser les performances du thème
          - [ ] Optimiser le chargement des images  
          - [ ] Nettoyer le code de debug" || echo "- [x] Thème optimisé et prêt pour la production")
          
          ---
          
          *🤖 PR générée automatiquement par GitHub Actions*
          *📋 Consultez les logs de l'action pour plus de détails*
        labels: |
          enhancement
          automation
          weekly-optimization
        assignees: Stardust75001
    
    - name: 📈 Résumé de l'action
      if: always()
      run: |
        echo "📊 === RÉSUMÉ DE L'OPTIMISATION HEBDOMADAIRE ==="
        echo "🎯 Score final: ${{ steps.final_score.outputs.final_score }}/100"
        echo "🔄 Statut: ${{ steps.final_score.outputs.status }}"
        echo "🌿 Branche créée: $([ "${{ steps.check_changes.outputs.has_changes }}" == "true" ] && echo "${{ env.branch_name }}" || echo "Aucune")"
        echo "🔄 PR créée: $([ "${{ steps.check_changes.outputs.has_changes }}" == "true" ] && echo "Oui" || echo "Non - Aucune modification")"
        echo ""
        echo "📋 Rapport complet disponible dans les artifacts de cette action."
    
    - name: 💾 Sauvegarder le rapport
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: optimization-report-$(date +%Y%m%d)
        path: audit_results.txt
        retention-days: 90