name: üîÑ Auto-Sync & PR Management

on:
  workflow_dispatch:
    inputs:
      sync_type:
        description: 'Type de synchronisation'
        required: true
        default: 'smart'
        type: choice
        options:
        - smart
        - force
        - backup-first
      create_pr:
        description: 'Cr√©er une PR automatiquement'
        required: false
        default: true
        type: boolean
  schedule:
    # Tous les vendredis √† 16h00 UTC (18h00 Paris) pour sync hebdo
    - cron: '0 16 * * 5'

permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  auto-sync:
    runs-on: ubuntu-latest

    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: üõ†Ô∏è Setup environment
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Auto-Sync"

    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: üìä Pre-sync Analysis
      id: pre_analysis
      run: |
        echo "=== ANALYSE PRE-SYNCHRONISATION ===" > sync_report.txt

        # V√©rifier l'√©tat du repo
        UNCOMMITTED=$(git status --porcelain | wc -l)
        UNTRACKED=$(git ls-files --others --exclude-standard | wc -l)
        MODIFIED=$(git diff --name-only | wc -l)

        echo "üìÅ Fichiers non commit√©s: $UNCOMMITTED" >> sync_report.txt
        echo "üìÅ Fichiers non track√©s: $UNTRACKED" >> sync_report.txt
        echo "üìÅ Fichiers modifi√©s: $MODIFIED" >> sync_report.txt

        # V√©rifier la connectivit√© avec origin
        git fetch origin main || echo "‚ö†Ô∏è Probl√®me de connectivit√© avec origin" >> sync_report.txt

        # V√©rifier les conflits potentiels
        BEHIND=$(git rev-list --count HEAD..origin/main 2>/dev/null || echo "0")
        AHEAD=$(git rev-list --count origin/main..HEAD 2>/dev/null || echo "0")

        echo "üìà Commits en retard: $BEHIND" >> sync_report.txt
        echo "üìâ Commits en avance: $AHEAD" >> sync_report.txt

        echo "uncommitted=$UNCOMMITTED" >> $GITHUB_OUTPUT
        echo "untracked=$UNTRACKED" >> $GITHUB_OUTPUT
        echo "behind=$BEHIND" >> $GITHUB_OUTPUT
        echo "ahead=$AHEAD" >> $GITHUB_OUTPUT

        # D√©terminer la strat√©gie de sync
        TOTAL_CHANGES=$((UNCOMMITTED + UNTRACKED))
        if [ $TOTAL_CHANGES -gt 0 ]; then
          echo "sync_needed=true" >> $GITHUB_OUTPUT
          echo "üîÑ Synchronisation n√©cessaire: $TOTAL_CHANGES changement(s)" >> sync_report.txt
        else
          echo "sync_needed=false" >> $GITHUB_OUTPUT
          echo "‚úÖ Repository d√©j√† synchronis√©" >> sync_report.txt
        fi

    - name: üîí Security Pre-Check
      if: steps.pre_analysis.outputs.sync_needed == 'true'
      id: security_precheck
      run: |
        echo "=== V√âRIFICATION S√âCURIT√â PRE-SYNC ===" >> sync_report.txt

        # Scan rapide des secrets
        SECRETS_COUNT=0

        # Chercher des secrets dans les fichiers modifi√©s
        if [ -n "$(git status --porcelain)" ]; then
          git status --porcelain | while read status file; do
            if [[ "$file" =~ \.(liquid|js|json)$ ]]; then
              # V√©rifier les secrets dans ce fichier
              SECRETS_IN_FILE=$(grep -E "sk_live_|pk_live_|AIza[A-Za-z0-9]{35}|ghp_|gho_|ghu_|ghs_|ghr_" "$file" 2>/dev/null | wc -l || echo "0")
              if [ $SECRETS_IN_FILE -gt 0 ]; then
                echo "üö® Secrets d√©tect√©s dans $file: $SECRETS_IN_FILE" >> sync_report.txt
                SECRETS_COUNT=$((SECRETS_COUNT + SECRETS_IN_FILE))
              fi
            fi
          done
        fi

        echo "security_issues=$SECRETS_COUNT" >> $GITHUB_OUTPUT

        if [ $SECRETS_COUNT -gt 0 ]; then
          echo "üö® BLOCAGE: Secrets d√©tect√©s avant synchronisation!" >> sync_report.txt
          echo "security_block=true" >> $GITHUB_OUTPUT
        else
          echo "‚úÖ Aucun secret d√©tect√©" >> sync_report.txt
          echo "security_block=false" >> $GITHUB_OUTPUT
        fi

    - name: üõë Block if Security Issues
      if: steps.security_precheck.outputs.security_block == 'true'
      run: |
        echo "üö® SYNCHRONISATION BLOQU√âE: Secrets d√©tect√©s dans le code!"
        echo "Veuillez corriger les probl√®mes de s√©curit√© avant de continuer."
        cat sync_report.txt
        exit 1

    - name: üíæ Create Backup Branch
      if: steps.pre_analysis.outputs.sync_needed == 'true' && (github.event.inputs.sync_type == 'backup-first' || github.event.inputs.sync_type == 'smart')
      run: |
        BACKUP_BRANCH="backup/pre-sync-$(date +%Y%m%d_%H%M%S)"
        git checkout -b $BACKUP_BRANCH
        git add .
        git commit -m "üóÑÔ∏è Backup before auto-sync: $(date)" || echo "Nothing to backup"
        git push origin $BACKUP_BRANCH || echo "Backup push failed"
        git checkout main
        echo "backup_branch=$BACKUP_BRANCH" >> $GITHUB_ENV
        echo "üì¶ Backup cr√©√©: $BACKUP_BRANCH" >> sync_report.txt

    - name: üßπ Smart Cleanup
      if: steps.pre_analysis.outputs.sync_needed == 'true'
      run: |
        echo "=== NETTOYAGE INTELLIGENT ===" >> sync_report.txt

        # Nettoyer les fichiers temporaires
        find . -name "*.bak" -delete || true
        find . -name "*.tmp" -delete || true
        find . -name ".DS_Store" -delete || true
        find . -name "Thumbs.db" -delete || true

        # Corriger les permissions
        chmod +x *.sh 2>/dev/null || true

        # Nettoyer les console.log dans les fichiers liquid (seulement si pas trop)
        CONSOLE_COUNT=$(grep -r "console\." --include="*.liquid" . | wc -l || echo "0")
        if [ $CONSOLE_COUNT -lt 10 ]; then
          find . -name "*.liquid" -exec sed -i.bak 's/console\.log([^;]*);*//g' {} \; 2>/dev/null || true
          find . -name "*.bak" -delete || true
          echo "üßπ Console.log nettoy√©s: $CONSOLE_COUNT" >> sync_report.txt
        fi

        # Moderniser les filtres Shopify (img_url -> image_url)
        DEPRECATED_COUNT=$(find . -name "*.liquid" -exec grep -l "img_url" {} \; | wc -l || echo "0")
        if [ $DEPRECATED_COUNT -lt 50 ]; then
          find . -name "*.liquid" -exec sed -i.bak 's/| *img_url/| image_url/g' {} \; 2>/dev/null || true
          find . -name "*.bak" -delete || true
          echo "üîÑ Filtres modernis√©s: $DEPRECATED_COUNT fichiers" >> sync_report.txt
        fi

        echo "‚úÖ Nettoyage termin√©" >> sync_report.txt

    - name: üìù Validate JSON Files
      if: steps.pre_analysis.outputs.sync_needed == 'true'
      run: |
        echo "=== VALIDATION JSON ===" >> sync_report.txt
        JSON_ERRORS=0

        for file in locales/*.json; do
          if [ -f "$file" ]; then
            if python3 -m json.tool "$file" > /dev/null 2>&1; then
              echo "‚úÖ $(basename "$file")" >> sync_report.txt
            else
              echo "‚ùå $(basename "$file") - ERREUR JSON" >> sync_report.txt
              JSON_ERRORS=$((JSON_ERRORS + 1))
            fi
          fi
        done

        if [ $JSON_ERRORS -gt 0 ]; then
          echo "‚ö†Ô∏è $JSON_ERRORS erreur(s) JSON d√©tect√©e(s) mais sync continue" >> sync_report.txt
        else
          echo "‚úÖ Tous les JSON sont valides" >> sync_report.txt
        fi

    - name: üîÑ Intelligent Commit Strategy
      if: steps.pre_analysis.outputs.sync_needed == 'true'
      run: |
        echo "=== STRAT√âGIE DE COMMIT ===" >> sync_report.txt

        # Analyser les types de changements
        LIQUID_CHANGES=$(git status --porcelain | grep "\.liquid$" | wc -l || echo "0")
        JSON_CHANGES=$(git status --porcelain | grep "\.json$" | wc -l || echo "0")
        JS_CHANGES=$(git status --porcelain | grep "\.js$" | wc -l || echo "0")
        CONFIG_CHANGES=$(git status --porcelain | grep -E "\.(yml|yaml|sh|md)$" | wc -l || echo "0")

        echo "üé® Templates Liquid: $LIQUID_CHANGES" >> sync_report.txt
        echo "üìù Fichiers JSON: $JSON_CHANGES" >> sync_report.txt
        echo "‚ö° Scripts JS: $JS_CHANGES" >> sync_report.txt
        echo "‚öôÔ∏è Configuration: $CONFIG_CHANGES" >> sync_report.txt

        # Cr√©er un message de commit intelligent
        COMMIT_MSG="üöÄ Auto-sync $(date +%Y%m%d): "

        if [ $LIQUID_CHANGES -gt 0 ]; then
          COMMIT_MSG="${COMMIT_MSG}Templates ($LIQUID_CHANGES), "
        fi
        if [ $JSON_CHANGES -gt 0 ]; then
          COMMIT_MSG="${COMMIT_MSG}Locales ($JSON_CHANGES), "
        fi
        if [ $JS_CHANGES -gt 0 ]; then
          COMMIT_MSG="${COMMIT_MSG}Scripts ($JS_CHANGES), "
        fi
        if [ $CONFIG_CHANGES -gt 0 ]; then
          COMMIT_MSG="${COMMIT_MSG}Config ($CONFIG_CHANGES), "
        fi

        # Nettoyer le message
        COMMIT_MSG=$(echo "$COMMIT_MSG" | sed 's/, $//')

        # Ajouter des d√©tails automatiques
        COMMIT_MSG="${COMMIT_MSG}

        üîß Optimisations automatiques:
        - Filtres Shopify modernis√©s
        - Console.log nettoy√©s
        - Fichiers temporaires supprim√©s
        - Permissions corrig√©es

        üìä R√©sum√©:
        - Templates: $LIQUID_CHANGES
        - Traductions: $JSON_CHANGES
        - Scripts: $JS_CHANGES
        - Configuration: $CONFIG_CHANGES

        ü§ñ G√©n√©r√© automatiquement par GitHub Actions"

        echo "commit_message<<EOF" >> $GITHUB_ENV
        echo "$COMMIT_MSG" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

        echo "üìù Message de commit pr√©par√©" >> sync_report.txt

    - name: üíæ Commit All Changes
      if: steps.pre_analysis.outputs.sync_needed == 'true'
      run: |
        git add .
        git status

        if [ -n "$(git status --porcelain)" ]; then
          git commit -m "${{ env.commit_message }}"
          echo "‚úÖ Commit cr√©√© avec succ√®s" >> sync_report.txt
        else
          echo "‚ÑπÔ∏è Aucun changement √† commiter apr√®s nettoyage" >> sync_report.txt
        fi

    - name: üåø Create Feature Branch for PR
      if: steps.pre_analysis.outputs.sync_needed == 'true' && (github.event.inputs.create_pr == 'true' || github.event_name == 'schedule')
      run: |
        FEATURE_BRANCH="auto-sync/weekly-$(date +%Y%m%d)"
        git checkout -b $FEATURE_BRANCH
        echo "feature_branch=$FEATURE_BRANCH" >> $GITHUB_ENV
        echo "üåø Branche cr√©√©e: $FEATURE_BRANCH" >> sync_report.txt

    - name: üì§ Push Changes
      if: steps.pre_analysis.outputs.sync_needed == 'true'
      run: |
        if [ -n "${{ env.feature_branch }}" ]; then
          # Push sur la branche feature pour PR
          git push origin ${{ env.feature_branch }}
          echo "üì§ Push sur branche feature: ${{ env.feature_branch }}" >> sync_report.txt
        else
          # Push direct sur main
          git push origin main
          echo "üì§ Push direct sur main" >> sync_report.txt
        fi

    - name: üîÑ Create Auto-PR
      if: steps.pre_analysis.outputs.sync_needed == 'true' && env.feature_branch != '' && (github.event.inputs.create_pr == 'true' || github.event_name == 'schedule')
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ env.feature_branch }}
        title: "üöÄ Weekly Auto-Sync - $(date +%d/%m/%Y)"
        body: |
          ## üîÑ Synchronisation Automatique Hebdomadaire

          **üìÖ Date**: $(date '+%d/%m/%Y √† %H:%M UTC')
          **ü§ñ Type**: Synchronisation automatique
          **üåø Branche**: `${{ env.feature_branch }}`

          ### üìä R√©sum√© des Changements

          - **üìÅ Fichiers non track√©s**: ${{ steps.pre_analysis.outputs.untracked }}
          - **üìù Fichiers modifi√©s**: ${{ steps.pre_analysis.outputs.uncommitted }}
          - **üîÑ Commits en retard**: ${{ steps.pre_analysis.outputs.behind }}

          ### üîß Optimisations Appliqu√©es

          - ‚úÖ Nettoyage des fichiers temporaires
          - ‚úÖ Correction des permissions des scripts
          - ‚úÖ Modernisation des filtres Shopify
          - ‚úÖ Suppression des console.log
          - ‚úÖ Validation JSON

          ### üõ°Ô∏è V√©rifications S√©curit√©

          - ‚úÖ Aucun secret d√©tect√© dans le code
          - ‚úÖ Fichiers sensibles v√©rifi√©s
          - ‚úÖ Backup cr√©√©: `${{ env.backup_branch }}`

          ### ‚úÖ Checklist Pre-Merge

          - [ ] V√©rifier les changements en local
          - [ ] Tester les fonctionnalit√©s modifi√©es
          - [ ] Valider l'affichage du th√®me
          - [ ] Confirmer la s√©curit√©

          ### üöÄ Actions Post-Merge

          Cette PR sera automatiquement:
          - Test√©e par les GitHub Actions
          - Analys√©e pour la performance
          - V√©rifi√©e pour la s√©curit√©

          ---

          *ü§ñ PR g√©n√©r√©e automatiquement par le workflow de synchronisation*
          *üìã Consultez les artifacts pour le rapport complet*
        labels: |
          automation
          weekly-sync
          enhancement
        assignees: Stardust75001
        draft: false

    - name: üìä Final Report
      if: always()
      run: |
        echo "" >> sync_report.txt
        echo "=== RAPPORT FINAL DE SYNCHRONISATION ===" >> sync_report.txt
        echo "üìÖ Date: $(date '+%d/%m/%Y √† %H:%M UTC')" >> sync_report.txt
        echo "üîÑ Type: ${{ github.event.inputs.sync_type || 'scheduled' }}" >> sync_report.txt
        echo "üåø Branche cr√©√©e: ${{ env.feature_branch || 'N/A' }}" >> sync_report.txt
        echo "üì¶ Backup: ${{ env.backup_branch || 'N/A' }}" >> sync_report.txt
        echo "üéØ Synchronisation n√©cessaire: ${{ steps.pre_analysis.outputs.sync_needed }}" >> sync_report.txt
        echo "üîí Probl√®mes s√©curit√©: ${{ steps.security_precheck.outputs.security_issues || '0' }}" >> sync_report.txt
        echo "" >> sync_report.txt
        echo "‚úÖ Synchronisation termin√©e avec succ√®s!" >> sync_report.txt

        cat sync_report.txt

    - name: üíæ Save Sync Report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: sync-report-$(date +%Y%m%d_%H%M)
        path: sync_report.txt
        retention-days: 90
